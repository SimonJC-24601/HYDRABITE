// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
}

enum SubscriptionTier {
  STARTER
  PRO
  AGENCY
}

enum ProcessingStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String
  role      UserRole @default(USER)
  subscription SubscriptionTier @default(STARTER)
  monthlyMinutes Int @default(120)
  usedMinutes    Int @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  projects Project[]
  
  @@map("users")
}

model Project {
  id          String   @id @default(cuid())
  name        String
  description String?
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  uploads Upload[]
  clips   Clip[]

  @@map("projects")
}

model Upload {
  id           String @id @default(cuid())
  filename     String
  originalName String
  fileSize     Int
  mimeType     String
  filePath     String
  duration     Float?
  projectId    String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  project        Project          @relation(fields: [projectId], references: [id], onDelete: Cascade)
  clips          Clip[]
  processingJobs ProcessingJob[]

  @@map("uploads")
}

model Clip {
  id          String   @id @default(cuid())
  title       String
  description String?
  startTime   Float
  endTime     Float
  duration    Float
  hashtags    String[] // Array of hashtags
  viralScore  Float    @default(0.0)
  projectId   String
  uploadId    String
  filePath    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  upload  Upload  @relation(fields: [uploadId], references: [id], onDelete: Cascade)

  @@map("clips")
}

model ProcessingJob {
  id        String           @id @default(cuid())
  uploadId  String
  status    ProcessingStatus @default(PENDING)
  progress  Float            @default(0.0)
  errorMessage String?
  transcriptData Json?
  aiAnalysis     Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations